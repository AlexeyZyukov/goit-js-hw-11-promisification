{"version":3,"sources":["js/promise_3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","console","log","Promise","resolve","reject","setTimeout","id","time","logSuccess","logError","warn","amount","then","catch"],"mappings":";AAAA,aAmCA,IAAMA,EAA4B,SAACC,EAAKC,GAC7BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGlDK,EAAkB,SAACC,GACjBC,IAAAA,EAAQR,EAA0B,KAAM,MAEvC,OADLS,QAAQC,IAAIF,GACP,IAAIG,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACUX,KAAKE,SAAW,IAGjCO,EAAQ,CAAEG,GAAIR,EAAYQ,GAAIC,KAAMR,IAEtCK,EAAON,EAAYQ,KAClBP,MAIDS,EAAa,SAAgB,GAAdF,IAAAA,EAAAA,EAAAA,GAAIC,EAAAA,EAAAA,KACvBP,QAAQC,IAAmBK,eAAAA,OAAAA,EAAmBC,kBAAAA,OAAAA,EAA9C,SAGIE,EAAW,SAAAH,GACfN,QAAQU,KAAqCJ,gCAAAA,OAAAA,EAA7C,+BAGFT,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ,GAChEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAOC,KAAKJ,GAAaK,MAAMJ,GACjEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,KAAMC,KAAKJ,GAAaK,MAAMJ,GAChEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ","file":"promise_3.668223fc.js","sourceRoot":"../src","sourcesContent":["'use strict'\n\n// const randomIntegerFromInterval = (min, max) => {\n//     return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//     const delay = randomIntegerFromInterval(200, 500);\n//     setTimeout(() => {\n//         const canProcess = Math.random() > 0.3;\n\n// if (canProcess) {\n//   onSuccess(transaction.id, delay);\n// } else {\n//   onError(transaction.id);\n// }\n// }, delay); };\n\n// const logSuccess = (id, time) => {\n//   console.log(`Transaction ${id} processed in ${time} ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// /*Работает так */ \n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError); \n\n//========================================================================\n/*Должно работать так */\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(1200, 3500);\n    console.log(delay);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      }\n      reject(transaction.id);\n    }, delay);\n  })\n};    \n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess) .catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess) .catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n\n//=========================================================================\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     /*\n//      * Если какое-то условие выполняется, то есть все хорошо,\n//      * вызываем resolve и получает данные. Условие зависит от задачи.\n//      */\n//     resolve('Data passed into resolve function :)');\n\n//     // Если что-то не так, вызываем reject и передаем ошибку\n//     //reject(\"Error passed into reject function :(\")\n//   }, 2000);\n// });\n\n// // Выполнится мгновенно\n// console.log('BEFORE promise.then');\n\n// const onResolve = data => {\n//   console.log(data); // \"Data passed into resolve function :)\"\n//   console.log('INSIDE promise.then - onResolve');\n// };\n\n// const onReject = error => {\n//   console.log('INSIDE promise.then - onReject');\n//   console.log(error); // \"Error passed into reject function :(\"\n// };\n\n// promise.then(\n//   // будет вызвана через 2 секунды, если обещание выполнится успешно\n//   onResolve,\n//   // будет вызвана через 2 секунды, если обещание выполнится с ошибкой\n//   onReject,\n// );\n\n// // Выполнится мгновенно\n// console.log('AFTER promise.then');\n"]}